// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=ainstruction);
    Not(in=ainstruction, out=cinstruction);
    And(a=cinstruction, b=instruction[12], out=minstruction);

    Mux16(a=instruction, b=ALUout, sel=cinstruction, out=aInput);

    ARegister(in=aInput, load=aLoad, out=aReg, out[0..14]=addressM); // A Register
    DRegister(in=ALUout, load=dLoad, out=dReg); // D Register

    Mux16(a=aReg, b=inM, sel=minstruction, out=ALUy);
    
    ALU(x=dReg, y=ALUy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=ALUzr, ng=ALUng);

    // Results
    // 5 4 3 STORE - A D M
    Or(a=instruction[5], b=ainstruction, out=aLoad);
    And(a=instruction[4], b=cinstruction, out=dLoad);
    And(a=instruction[3], b=cinstruction, out=writeM);

    
    // 2 1 0  JMP
    And(a=instruction[2], b=ALUng, out=negativeJMP);

    And(a=instruction[1], b=ALUzr, out=zeroJMP);

    Or(a=ALUzr, b=ALUng, out=ngOrZr);
    Not(in=ngOrZr, out=positiveResult);
    And(a=instruction[0], b=positiveResult, out=positiveJMP);

    Or(a=negativeJMP, b=zeroJMP, out=negZeroJMP);
    Or(a=negZeroJMP, b=positiveJMP, out=negZeroPosJMP);
    And(a=negZeroPosJMP, b=cinstruction, out=JMP);

    PC(in=aReg, load=JMP, inc=true, reset=reset, out[0..14]=pc, out[15] = false);

}